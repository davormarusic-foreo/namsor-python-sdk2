# coding: utf-8

"""
    NamSor API v2

    NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!   # noqa: E501

    OpenAPI spec version: 2.0.18
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CorridorIn(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'first_last_name_geo_from': 'FirstLastNameGeoIn',
        'first_last_name_geo_to': 'FirstLastNameGeoIn'
    }

    attribute_map = {
        'id': 'id',
        'first_last_name_geo_from': 'firstLastNameGeoFrom',
        'first_last_name_geo_to': 'firstLastNameGeoTo'
    }

    def __init__(self, id=None, first_last_name_geo_from=None, first_last_name_geo_to=None):  # noqa: E501
        """CorridorIn - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._first_last_name_geo_from = None
        self._first_last_name_geo_to = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if first_last_name_geo_from is not None:
            self.first_last_name_geo_from = first_last_name_geo_from
        if first_last_name_geo_to is not None:
            self.first_last_name_geo_to = first_last_name_geo_to

    @property
    def id(self):
        """Gets the id of this CorridorIn.  # noqa: E501


        :return: The id of this CorridorIn.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CorridorIn.


        :param id: The id of this CorridorIn.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def first_last_name_geo_from(self):
        """Gets the first_last_name_geo_from of this CorridorIn.  # noqa: E501


        :return: The first_last_name_geo_from of this CorridorIn.  # noqa: E501
        :rtype: FirstLastNameGeoIn
        """
        return self._first_last_name_geo_from

    @first_last_name_geo_from.setter
    def first_last_name_geo_from(self, first_last_name_geo_from):
        """Sets the first_last_name_geo_from of this CorridorIn.


        :param first_last_name_geo_from: The first_last_name_geo_from of this CorridorIn.  # noqa: E501
        :type: FirstLastNameGeoIn
        """

        self._first_last_name_geo_from = first_last_name_geo_from

    @property
    def first_last_name_geo_to(self):
        """Gets the first_last_name_geo_to of this CorridorIn.  # noqa: E501


        :return: The first_last_name_geo_to of this CorridorIn.  # noqa: E501
        :rtype: FirstLastNameGeoIn
        """
        return self._first_last_name_geo_to

    @first_last_name_geo_to.setter
    def first_last_name_geo_to(self, first_last_name_geo_to):
        """Sets the first_last_name_geo_to of this CorridorIn.


        :param first_last_name_geo_to: The first_last_name_geo_to of this CorridorIn.  # noqa: E501
        :type: FirstLastNameGeoIn
        """

        self._first_last_name_geo_to = first_last_name_geo_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CorridorIn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
