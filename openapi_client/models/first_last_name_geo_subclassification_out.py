# coding: utf-8

"""
    NamSor API v2

    NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!   # noqa: E501

    OpenAPI spec version: 2.0.18
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FirstLastNameGeoSubclassificationOut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'script': 'str',
        'id': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'country_iso2': 'str',
        'sub_classification': 'str',
        'sub_classification_alt': 'str',
        'subclassification_top': 'list[str]',
        'score': 'float',
        'probability_calibrated': 'float',
        'probability_alt_calibrated': 'float'
    }

    attribute_map = {
        'script': 'script',
        'id': 'id',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'country_iso2': 'countryIso2',
        'sub_classification': 'subClassification',
        'sub_classification_alt': 'subClassificationAlt',
        'subclassification_top': 'subclassificationTop',
        'score': 'score',
        'probability_calibrated': 'probabilityCalibrated',
        'probability_alt_calibrated': 'probabilityAltCalibrated'
    }

    def __init__(self, script=None, id=None, first_name=None, last_name=None, country_iso2=None, sub_classification=None, sub_classification_alt=None, subclassification_top=None, score=None, probability_calibrated=None, probability_alt_calibrated=None):  # noqa: E501
        """FirstLastNameGeoSubclassificationOut - a model defined in OpenAPI"""  # noqa: E501

        self._script = None
        self._id = None
        self._first_name = None
        self._last_name = None
        self._country_iso2 = None
        self._sub_classification = None
        self._sub_classification_alt = None
        self._subclassification_top = None
        self._score = None
        self._probability_calibrated = None
        self._probability_alt_calibrated = None
        self.discriminator = None

        if script is not None:
            self.script = script
        if id is not None:
            self.id = id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if country_iso2 is not None:
            self.country_iso2 = country_iso2
        if sub_classification is not None:
            self.sub_classification = sub_classification
        if sub_classification_alt is not None:
            self.sub_classification_alt = sub_classification_alt
        if subclassification_top is not None:
            self.subclassification_top = subclassification_top
        if score is not None:
            self.score = score
        if probability_calibrated is not None:
            self.probability_calibrated = probability_calibrated
        if probability_alt_calibrated is not None:
            self.probability_alt_calibrated = probability_alt_calibrated

    @property
    def script(self):
        """Gets the script of this FirstLastNameGeoSubclassificationOut.  # noqa: E501


        :return: The script of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this FirstLastNameGeoSubclassificationOut.


        :param script: The script of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :type: str
        """

        self._script = script

    @property
    def id(self):
        """Gets the id of this FirstLastNameGeoSubclassificationOut.  # noqa: E501


        :return: The id of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FirstLastNameGeoSubclassificationOut.


        :param id: The id of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this FirstLastNameGeoSubclassificationOut.  # noqa: E501

        The first name (also known as given name)  # noqa: E501

        :return: The first_name of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this FirstLastNameGeoSubclassificationOut.

        The first name (also known as given name)  # noqa: E501

        :param first_name: The first_name of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this FirstLastNameGeoSubclassificationOut.  # noqa: E501

        The last name (also known as family name, or surname)  # noqa: E501

        :return: The last_name of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this FirstLastNameGeoSubclassificationOut.

        The last name (also known as family name, or surname)  # noqa: E501

        :param last_name: The last_name of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def country_iso2(self):
        """Gets the country_iso2 of this FirstLastNameGeoSubclassificationOut.  # noqa: E501

        The input country ISO2 code  # noqa: E501

        :return: The country_iso2 of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :rtype: str
        """
        return self._country_iso2

    @country_iso2.setter
    def country_iso2(self, country_iso2):
        """Sets the country_iso2 of this FirstLastNameGeoSubclassificationOut.

        The input country ISO2 code  # noqa: E501

        :param country_iso2: The country_iso2 of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :type: str
        """

        self._country_iso2 = country_iso2

    @property
    def sub_classification(self):
        """Gets the sub_classification of this FirstLastNameGeoSubclassificationOut.  # noqa: E501

        Most likely subclassification ISO_3166-2 code  # noqa: E501

        :return: The sub_classification of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :rtype: str
        """
        return self._sub_classification

    @sub_classification.setter
    def sub_classification(self, sub_classification):
        """Sets the sub_classification of this FirstLastNameGeoSubclassificationOut.

        Most likely subclassification ISO_3166-2 code  # noqa: E501

        :param sub_classification: The sub_classification of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :type: str
        """

        self._sub_classification = sub_classification

    @property
    def sub_classification_alt(self):
        """Gets the sub_classification_alt of this FirstLastNameGeoSubclassificationOut.  # noqa: E501

        Second best alternative : subclassification ISO_3166-2 code  # noqa: E501

        :return: The sub_classification_alt of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :rtype: str
        """
        return self._sub_classification_alt

    @sub_classification_alt.setter
    def sub_classification_alt(self, sub_classification_alt):
        """Sets the sub_classification_alt of this FirstLastNameGeoSubclassificationOut.

        Second best alternative : subclassification ISO_3166-2 code  # noqa: E501

        :param sub_classification_alt: The sub_classification_alt of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :type: str
        """

        self._sub_classification_alt = sub_classification_alt

    @property
    def subclassification_top(self):
        """Gets the subclassification_top of this FirstLastNameGeoSubclassificationOut.  # noqa: E501

        List subclassification ISO_3166-2 codes (top 10)  # noqa: E501

        :return: The subclassification_top of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :rtype: list[str]
        """
        return self._subclassification_top

    @subclassification_top.setter
    def subclassification_top(self, subclassification_top):
        """Sets the subclassification_top of this FirstLastNameGeoSubclassificationOut.

        List subclassification ISO_3166-2 codes (top 10)  # noqa: E501

        :param subclassification_top: The subclassification_top of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :type: list[str]
        """

        self._subclassification_top = subclassification_top

    @property
    def score(self):
        """Gets the score of this FirstLastNameGeoSubclassificationOut.  # noqa: E501

        Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available.   # noqa: E501

        :return: The score of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this FirstLastNameGeoSubclassificationOut.

        Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available.   # noqa: E501

        :param score: The score of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :type: float
        """
        if score is not None and score > 100:  # noqa: E501
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `100`")  # noqa: E501
        if score is not None and score < 0:  # noqa: E501
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")  # noqa: E501

        self._score = score

    @property
    def probability_calibrated(self):
        """Gets the probability_calibrated of this FirstLastNameGeoSubclassificationOut.  # noqa: E501

        The calibrated probability for subclassification to have been guessed correctly. -1 = still calibrating.   # noqa: E501

        :return: The probability_calibrated of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :rtype: float
        """
        return self._probability_calibrated

    @probability_calibrated.setter
    def probability_calibrated(self, probability_calibrated):
        """Sets the probability_calibrated of this FirstLastNameGeoSubclassificationOut.

        The calibrated probability for subclassification to have been guessed correctly. -1 = still calibrating.   # noqa: E501

        :param probability_calibrated: The probability_calibrated of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :type: float
        """
        if probability_calibrated is not None and probability_calibrated > 1:  # noqa: E501
            raise ValueError("Invalid value for `probability_calibrated`, must be a value less than or equal to `1`")  # noqa: E501
        if probability_calibrated is not None and probability_calibrated < -1:  # noqa: E501
            raise ValueError("Invalid value for `probability_calibrated`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._probability_calibrated = probability_calibrated

    @property
    def probability_alt_calibrated(self):
        """Gets the probability_alt_calibrated of this FirstLastNameGeoSubclassificationOut.  # noqa: E501

        The calibrated probability for subclassification OR subclassificationAlt to have been guessed correctly. -1 = still calibrating.   # noqa: E501

        :return: The probability_alt_calibrated of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :rtype: float
        """
        return self._probability_alt_calibrated

    @probability_alt_calibrated.setter
    def probability_alt_calibrated(self, probability_alt_calibrated):
        """Sets the probability_alt_calibrated of this FirstLastNameGeoSubclassificationOut.

        The calibrated probability for subclassification OR subclassificationAlt to have been guessed correctly. -1 = still calibrating.   # noqa: E501

        :param probability_alt_calibrated: The probability_alt_calibrated of this FirstLastNameGeoSubclassificationOut.  # noqa: E501
        :type: float
        """
        if probability_alt_calibrated is not None and probability_alt_calibrated > 1:  # noqa: E501
            raise ValueError("Invalid value for `probability_alt_calibrated`, must be a value less than or equal to `1`")  # noqa: E501
        if probability_alt_calibrated is not None and probability_alt_calibrated < -1:  # noqa: E501
            raise ValueError("Invalid value for `probability_alt_calibrated`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._probability_alt_calibrated = probability_alt_calibrated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirstLastNameGeoSubclassificationOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
