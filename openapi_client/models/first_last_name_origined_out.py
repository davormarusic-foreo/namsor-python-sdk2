# coding: utf-8

"""
    NamSor API v2

    NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!   # noqa: E501

    OpenAPI spec version: 2.0.26
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FirstLastNameOriginedOut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'script': 'str',
        'id': 'str',
        'explanation': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'country_origin': 'str',
        'country_origin_alt': 'str',
        'countries_origin_top': 'list[str]',
        'score': 'float',
        'region_origin': 'str',
        'top_region_origin': 'str',
        'sub_region_origin': 'str',
        'probability_calibrated': 'float',
        'probability_alt_calibrated': 'float',
        'religion_stats': 'list[ReligionStatOut]',
        'religion_stats_alt': 'list[ReligionStatOut]'
    }

    attribute_map = {
        'script': 'script',
        'id': 'id',
        'explanation': 'explanation',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'country_origin': 'countryOrigin',
        'country_origin_alt': 'countryOriginAlt',
        'countries_origin_top': 'countriesOriginTop',
        'score': 'score',
        'region_origin': 'regionOrigin',
        'top_region_origin': 'topRegionOrigin',
        'sub_region_origin': 'subRegionOrigin',
        'probability_calibrated': 'probabilityCalibrated',
        'probability_alt_calibrated': 'probabilityAltCalibrated',
        'religion_stats': 'religionStats',
        'religion_stats_alt': 'religionStatsAlt'
    }

    def __init__(self, script=None, id=None, explanation=None, first_name=None, last_name=None, country_origin=None, country_origin_alt=None, countries_origin_top=None, score=None, region_origin=None, top_region_origin=None, sub_region_origin=None, probability_calibrated=None, probability_alt_calibrated=None, religion_stats=None, religion_stats_alt=None):  # noqa: E501
        """FirstLastNameOriginedOut - a model defined in OpenAPI"""  # noqa: E501

        self._script = None
        self._id = None
        self._explanation = None
        self._first_name = None
        self._last_name = None
        self._country_origin = None
        self._country_origin_alt = None
        self._countries_origin_top = None
        self._score = None
        self._region_origin = None
        self._top_region_origin = None
        self._sub_region_origin = None
        self._probability_calibrated = None
        self._probability_alt_calibrated = None
        self._religion_stats = None
        self._religion_stats_alt = None
        self.discriminator = None

        if script is not None:
            self.script = script
        if id is not None:
            self.id = id
        if explanation is not None:
            self.explanation = explanation
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if country_origin is not None:
            self.country_origin = country_origin
        if country_origin_alt is not None:
            self.country_origin_alt = country_origin_alt
        if countries_origin_top is not None:
            self.countries_origin_top = countries_origin_top
        if score is not None:
            self.score = score
        if region_origin is not None:
            self.region_origin = region_origin
        if top_region_origin is not None:
            self.top_region_origin = top_region_origin
        if sub_region_origin is not None:
            self.sub_region_origin = sub_region_origin
        if probability_calibrated is not None:
            self.probability_calibrated = probability_calibrated
        if probability_alt_calibrated is not None:
            self.probability_alt_calibrated = probability_alt_calibrated
        if religion_stats is not None:
            self.religion_stats = religion_stats
        if religion_stats_alt is not None:
            self.religion_stats_alt = religion_stats_alt

    @property
    def script(self):
        """Gets the script of this FirstLastNameOriginedOut.  # noqa: E501


        :return: The script of this FirstLastNameOriginedOut.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this FirstLastNameOriginedOut.


        :param script: The script of this FirstLastNameOriginedOut.  # noqa: E501
        :type: str
        """

        self._script = script

    @property
    def id(self):
        """Gets the id of this FirstLastNameOriginedOut.  # noqa: E501


        :return: The id of this FirstLastNameOriginedOut.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FirstLastNameOriginedOut.


        :param id: The id of this FirstLastNameOriginedOut.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def explanation(self):
        """Gets the explanation of this FirstLastNameOriginedOut.  # noqa: E501


        :return: The explanation of this FirstLastNameOriginedOut.  # noqa: E501
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this FirstLastNameOriginedOut.


        :param explanation: The explanation of this FirstLastNameOriginedOut.  # noqa: E501
        :type: str
        """

        self._explanation = explanation

    @property
    def first_name(self):
        """Gets the first_name of this FirstLastNameOriginedOut.  # noqa: E501

        The first name (also known as given name)  # noqa: E501

        :return: The first_name of this FirstLastNameOriginedOut.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this FirstLastNameOriginedOut.

        The first name (also known as given name)  # noqa: E501

        :param first_name: The first_name of this FirstLastNameOriginedOut.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this FirstLastNameOriginedOut.  # noqa: E501

        The last name (also known as family name, or surname)  # noqa: E501

        :return: The last_name of this FirstLastNameOriginedOut.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this FirstLastNameOriginedOut.

        The last name (also known as family name, or surname)  # noqa: E501

        :param last_name: The last_name of this FirstLastNameOriginedOut.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def country_origin(self):
        """Gets the country_origin of this FirstLastNameOriginedOut.  # noqa: E501

        Most likely country of Origin  # noqa: E501

        :return: The country_origin of this FirstLastNameOriginedOut.  # noqa: E501
        :rtype: str
        """
        return self._country_origin

    @country_origin.setter
    def country_origin(self, country_origin):
        """Sets the country_origin of this FirstLastNameOriginedOut.

        Most likely country of Origin  # noqa: E501

        :param country_origin: The country_origin of this FirstLastNameOriginedOut.  # noqa: E501
        :type: str
        """

        self._country_origin = country_origin

    @property
    def country_origin_alt(self):
        """Gets the country_origin_alt of this FirstLastNameOriginedOut.  # noqa: E501

        Second best alternative : country of Origin  # noqa: E501

        :return: The country_origin_alt of this FirstLastNameOriginedOut.  # noqa: E501
        :rtype: str
        """
        return self._country_origin_alt

    @country_origin_alt.setter
    def country_origin_alt(self, country_origin_alt):
        """Sets the country_origin_alt of this FirstLastNameOriginedOut.

        Second best alternative : country of Origin  # noqa: E501

        :param country_origin_alt: The country_origin_alt of this FirstLastNameOriginedOut.  # noqa: E501
        :type: str
        """

        self._country_origin_alt = country_origin_alt

    @property
    def countries_origin_top(self):
        """Gets the countries_origin_top of this FirstLastNameOriginedOut.  # noqa: E501

        List countries of Origin (top 10)  # noqa: E501

        :return: The countries_origin_top of this FirstLastNameOriginedOut.  # noqa: E501
        :rtype: list[str]
        """
        return self._countries_origin_top

    @countries_origin_top.setter
    def countries_origin_top(self, countries_origin_top):
        """Sets the countries_origin_top of this FirstLastNameOriginedOut.

        List countries of Origin (top 10)  # noqa: E501

        :param countries_origin_top: The countries_origin_top of this FirstLastNameOriginedOut.  # noqa: E501
        :type: list[str]
        """

        self._countries_origin_top = countries_origin_top

    @property
    def score(self):
        """Gets the score of this FirstLastNameOriginedOut.  # noqa: E501

        Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available.   # noqa: E501

        :return: The score of this FirstLastNameOriginedOut.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this FirstLastNameOriginedOut.

        Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available.   # noqa: E501

        :param score: The score of this FirstLastNameOriginedOut.  # noqa: E501
        :type: float
        """
        if score is not None and score > 100:  # noqa: E501
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `100`")  # noqa: E501
        if score is not None and score < 0:  # noqa: E501
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")  # noqa: E501

        self._score = score

    @property
    def region_origin(self):
        """Gets the region_origin of this FirstLastNameOriginedOut.  # noqa: E501

        Most likely region of Origin (based on countryOrigin ISO2 code)  # noqa: E501

        :return: The region_origin of this FirstLastNameOriginedOut.  # noqa: E501
        :rtype: str
        """
        return self._region_origin

    @region_origin.setter
    def region_origin(self, region_origin):
        """Sets the region_origin of this FirstLastNameOriginedOut.

        Most likely region of Origin (based on countryOrigin ISO2 code)  # noqa: E501

        :param region_origin: The region_origin of this FirstLastNameOriginedOut.  # noqa: E501
        :type: str
        """

        self._region_origin = region_origin

    @property
    def top_region_origin(self):
        """Gets the top_region_origin of this FirstLastNameOriginedOut.  # noqa: E501

        Most likely top region of Origin (based on countryOrigin ISO2 code)  # noqa: E501

        :return: The top_region_origin of this FirstLastNameOriginedOut.  # noqa: E501
        :rtype: str
        """
        return self._top_region_origin

    @top_region_origin.setter
    def top_region_origin(self, top_region_origin):
        """Sets the top_region_origin of this FirstLastNameOriginedOut.

        Most likely top region of Origin (based on countryOrigin ISO2 code)  # noqa: E501

        :param top_region_origin: The top_region_origin of this FirstLastNameOriginedOut.  # noqa: E501
        :type: str
        """

        self._top_region_origin = top_region_origin

    @property
    def sub_region_origin(self):
        """Gets the sub_region_origin of this FirstLastNameOriginedOut.  # noqa: E501

        Most likely sub region of Origin (based on countryOrigin ISO2 code)  # noqa: E501

        :return: The sub_region_origin of this FirstLastNameOriginedOut.  # noqa: E501
        :rtype: str
        """
        return self._sub_region_origin

    @sub_region_origin.setter
    def sub_region_origin(self, sub_region_origin):
        """Sets the sub_region_origin of this FirstLastNameOriginedOut.

        Most likely sub region of Origin (based on countryOrigin ISO2 code)  # noqa: E501

        :param sub_region_origin: The sub_region_origin of this FirstLastNameOriginedOut.  # noqa: E501
        :type: str
        """

        self._sub_region_origin = sub_region_origin

    @property
    def probability_calibrated(self):
        """Gets the probability_calibrated of this FirstLastNameOriginedOut.  # noqa: E501

        The calibrated probability for countryOrigin to have been guessed correctly. -1 = still calibrating.   # noqa: E501

        :return: The probability_calibrated of this FirstLastNameOriginedOut.  # noqa: E501
        :rtype: float
        """
        return self._probability_calibrated

    @probability_calibrated.setter
    def probability_calibrated(self, probability_calibrated):
        """Sets the probability_calibrated of this FirstLastNameOriginedOut.

        The calibrated probability for countryOrigin to have been guessed correctly. -1 = still calibrating.   # noqa: E501

        :param probability_calibrated: The probability_calibrated of this FirstLastNameOriginedOut.  # noqa: E501
        :type: float
        """
        if probability_calibrated is not None and probability_calibrated > 1:  # noqa: E501
            raise ValueError("Invalid value for `probability_calibrated`, must be a value less than or equal to `1`")  # noqa: E501
        if probability_calibrated is not None and probability_calibrated < -1:  # noqa: E501
            raise ValueError("Invalid value for `probability_calibrated`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._probability_calibrated = probability_calibrated

    @property
    def probability_alt_calibrated(self):
        """Gets the probability_alt_calibrated of this FirstLastNameOriginedOut.  # noqa: E501

        The calibrated probability for countryOrigin OR countryOriginAlt to have been guessed correctly. -1 = still calibrating.   # noqa: E501

        :return: The probability_alt_calibrated of this FirstLastNameOriginedOut.  # noqa: E501
        :rtype: float
        """
        return self._probability_alt_calibrated

    @probability_alt_calibrated.setter
    def probability_alt_calibrated(self, probability_alt_calibrated):
        """Sets the probability_alt_calibrated of this FirstLastNameOriginedOut.

        The calibrated probability for countryOrigin OR countryOriginAlt to have been guessed correctly. -1 = still calibrating.   # noqa: E501

        :param probability_alt_calibrated: The probability_alt_calibrated of this FirstLastNameOriginedOut.  # noqa: E501
        :type: float
        """
        if probability_alt_calibrated is not None and probability_alt_calibrated > 1:  # noqa: E501
            raise ValueError("Invalid value for `probability_alt_calibrated`, must be a value less than or equal to `1`")  # noqa: E501
        if probability_alt_calibrated is not None and probability_alt_calibrated < -1:  # noqa: E501
            raise ValueError("Invalid value for `probability_alt_calibrated`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._probability_alt_calibrated = probability_alt_calibrated

    @property
    def religion_stats(self):
        """Gets the religion_stats of this FirstLastNameOriginedOut.  # noqa: E501

        Geographic religious statistics, assuming country of origin is correctly predicted.  # noqa: E501

        :return: The religion_stats of this FirstLastNameOriginedOut.  # noqa: E501
        :rtype: list[ReligionStatOut]
        """
        return self._religion_stats

    @religion_stats.setter
    def religion_stats(self, religion_stats):
        """Sets the religion_stats of this FirstLastNameOriginedOut.

        Geographic religious statistics, assuming country of origin is correctly predicted.  # noqa: E501

        :param religion_stats: The religion_stats of this FirstLastNameOriginedOut.  # noqa: E501
        :type: list[ReligionStatOut]
        """

        self._religion_stats = religion_stats

    @property
    def religion_stats_alt(self):
        """Gets the religion_stats_alt of this FirstLastNameOriginedOut.  # noqa: E501

        Geographic religious statistics, assuming country of origin OR best alternative is correctly predicted.  # noqa: E501

        :return: The religion_stats_alt of this FirstLastNameOriginedOut.  # noqa: E501
        :rtype: list[ReligionStatOut]
        """
        return self._religion_stats_alt

    @religion_stats_alt.setter
    def religion_stats_alt(self, religion_stats_alt):
        """Sets the religion_stats_alt of this FirstLastNameOriginedOut.

        Geographic religious statistics, assuming country of origin OR best alternative is correctly predicted.  # noqa: E501

        :param religion_stats_alt: The religion_stats_alt of this FirstLastNameOriginedOut.  # noqa: E501
        :type: list[ReligionStatOut]
        """

        self._religion_stats_alt = religion_stats_alt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirstLastNameOriginedOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
