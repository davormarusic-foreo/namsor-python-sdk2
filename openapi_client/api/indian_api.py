# coding: utf-8

"""
    NamSor API v2

    NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!   # noqa: E501

    OpenAPI spec version: 2.0.26
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class IndianApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def castegroup_indian_full(self, sub_division_iso31662, personal_name_full, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.castegroup_indian_full(sub_division_iso31662, personal_name_full, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_division_iso31662: (required)
        :param str personal_name_full: (required)
        :return: PersonalNameCastegroupOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.castegroup_indian_full_with_http_info(sub_division_iso31662, personal_name_full, **kwargs)  # noqa: E501
        else:
            (data) = self.castegroup_indian_full_with_http_info(sub_division_iso31662, personal_name_full, **kwargs)  # noqa: E501
            return data

    def castegroup_indian_full_with_http_info(self, sub_division_iso31662, personal_name_full, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.castegroup_indian_full_with_http_info(sub_division_iso31662, personal_name_full, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_division_iso31662: (required)
        :param str personal_name_full: (required)
        :return: PersonalNameCastegroupOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['sub_division_iso31662', 'personal_name_full']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method castegroup_indian_full" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sub_division_iso31662' is set
        if ('sub_division_iso31662' not in local_var_params or
                local_var_params['sub_division_iso31662'] is None):
            raise ValueError("Missing the required parameter `sub_division_iso31662` when calling `castegroup_indian_full`")  # noqa: E501
        # verify the required parameter 'personal_name_full' is set
        if ('personal_name_full' not in local_var_params or
                local_var_params['personal_name_full'] is None):
            raise ValueError("Missing the required parameter `personal_name_full` when calling `castegroup_indian_full`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sub_division_iso31662' in local_var_params:
            path_params['subDivisionIso31662'] = local_var_params['sub_division_iso31662']  # noqa: E501
        if 'personal_name_full' in local_var_params:
            path_params['personalNameFull'] = local_var_params['personal_name_full']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/castegroupIndianFull/{subDivisionIso31662}/{personalNameFull}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonalNameCastegroupOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def castegroup_indian_full_batch(self, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.castegroup_indian_full_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameSubdivisionIn batch_personal_name_subdivision_in: A list of personal names
        :return: BatchPersonalNameCastegroupOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.castegroup_indian_full_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.castegroup_indian_full_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def castegroup_indian_full_batch_with_http_info(self, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.castegroup_indian_full_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameSubdivisionIn batch_personal_name_subdivision_in: A list of personal names
        :return: BatchPersonalNameCastegroupOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_personal_name_subdivision_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method castegroup_indian_full_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_personal_name_subdivision_in' in local_var_params:
            body_params = local_var_params['batch_personal_name_subdivision_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/castegroupIndianFullBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchPersonalNameCastegroupOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def religion(self, sub_division_iso31662, personal_name_full, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.religion(sub_division_iso31662, personal_name_full, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_division_iso31662: (required)
        :param str personal_name_full: (required)
        :return: PersonalNameReligionedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.religion_with_http_info(sub_division_iso31662, personal_name_full, **kwargs)  # noqa: E501
        else:
            (data) = self.religion_with_http_info(sub_division_iso31662, personal_name_full, **kwargs)  # noqa: E501
            return data

    def religion_with_http_info(self, sub_division_iso31662, personal_name_full, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.religion_with_http_info(sub_division_iso31662, personal_name_full, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_division_iso31662: (required)
        :param str personal_name_full: (required)
        :return: PersonalNameReligionedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['sub_division_iso31662', 'personal_name_full']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method religion" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sub_division_iso31662' is set
        if ('sub_division_iso31662' not in local_var_params or
                local_var_params['sub_division_iso31662'] is None):
            raise ValueError("Missing the required parameter `sub_division_iso31662` when calling `religion`")  # noqa: E501
        # verify the required parameter 'personal_name_full' is set
        if ('personal_name_full' not in local_var_params or
                local_var_params['personal_name_full'] is None):
            raise ValueError("Missing the required parameter `personal_name_full` when calling `religion`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sub_division_iso31662' in local_var_params:
            path_params['subDivisionIso31662'] = local_var_params['sub_division_iso31662']  # noqa: E501
        if 'personal_name_full' in local_var_params:
            path_params['personalNameFull'] = local_var_params['personal_name_full']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/religionIndianFull/{subDivisionIso31662}/{personalNameFull}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonalNameReligionedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def religion_indian_full_batch(self, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.religion_indian_full_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameSubdivisionIn batch_personal_name_subdivision_in: A list of personal names
        :return: BatchPersonalNameReligionedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.religion_indian_full_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.religion_indian_full_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def religion_indian_full_batch_with_http_info(self, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.religion_indian_full_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameSubdivisionIn batch_personal_name_subdivision_in: A list of personal names
        :return: BatchPersonalNameReligionedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_personal_name_subdivision_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method religion_indian_full_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_personal_name_subdivision_in' in local_var_params:
            body_params = local_var_params['batch_personal_name_subdivision_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/religionIndianFullBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchPersonalNameReligionedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def subclassification_indian(self, first_name, last_name, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subclassification_indian(first_name, last_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str first_name: (required)
        :param str last_name: (required)
        :return: FirstLastNameGeoSubclassificationOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.subclassification_indian_with_http_info(first_name, last_name, **kwargs)  # noqa: E501
        else:
            (data) = self.subclassification_indian_with_http_info(first_name, last_name, **kwargs)  # noqa: E501
            return data

    def subclassification_indian_with_http_info(self, first_name, last_name, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subclassification_indian_with_http_info(first_name, last_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str first_name: (required)
        :param str last_name: (required)
        :return: FirstLastNameGeoSubclassificationOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['first_name', 'last_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subclassification_indian" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'first_name' is set
        if ('first_name' not in local_var_params or
                local_var_params['first_name'] is None):
            raise ValueError("Missing the required parameter `first_name` when calling `subclassification_indian`")  # noqa: E501
        # verify the required parameter 'last_name' is set
        if ('last_name' not in local_var_params or
                local_var_params['last_name'] is None):
            raise ValueError("Missing the required parameter `last_name` when calling `subclassification_indian`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'first_name' in local_var_params:
            path_params['firstName'] = local_var_params['first_name']  # noqa: E501
        if 'last_name' in local_var_params:
            path_params['lastName'] = local_var_params['last_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/subclassificationIndian/{firstName}/{lastName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirstLastNameGeoSubclassificationOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def subclassification_indian_batch(self, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subclassification_indian_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameGeoIn batch_first_last_name_geo_in: A list of personal names
        :return: BatchFirstLastNameGeoSubclassificationOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.subclassification_indian_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.subclassification_indian_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def subclassification_indian_batch_with_http_info(self, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subclassification_indian_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameGeoIn batch_first_last_name_geo_in: A list of personal names
        :return: BatchFirstLastNameGeoSubclassificationOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_first_last_name_geo_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subclassification_indian_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_first_last_name_geo_in' in local_var_params:
            body_params = local_var_params['batch_first_last_name_geo_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/subclassificationIndianBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchFirstLastNameGeoSubclassificationOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def subclassification_indian_full(self, full_name, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subclassification_indian_full(full_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str full_name: (required)
        :return: PersonalNameGeoSubclassificationOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.subclassification_indian_full_with_http_info(full_name, **kwargs)  # noqa: E501
        else:
            (data) = self.subclassification_indian_full_with_http_info(full_name, **kwargs)  # noqa: E501
            return data

    def subclassification_indian_full_with_http_info(self, full_name, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subclassification_indian_full_with_http_info(full_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str full_name: (required)
        :return: PersonalNameGeoSubclassificationOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['full_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subclassification_indian_full" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'full_name' is set
        if ('full_name' not in local_var_params or
                local_var_params['full_name'] is None):
            raise ValueError("Missing the required parameter `full_name` when calling `subclassification_indian_full`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'full_name' in local_var_params:
            path_params['fullName'] = local_var_params['full_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/subclassificationIndianFull/{fullName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonalNameGeoSubclassificationOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def subclassification_indian_full_batch(self, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subclassification_indian_full_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameGeoIn batch_personal_name_geo_in: A list of personal names
        :return: BatchPersonalNameGeoSubclassificationOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.subclassification_indian_full_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.subclassification_indian_full_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def subclassification_indian_full_batch_with_http_info(self, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subclassification_indian_full_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameGeoIn batch_personal_name_geo_in: A list of personal names
        :return: BatchPersonalNameGeoSubclassificationOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_personal_name_geo_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subclassification_indian_full_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_personal_name_geo_in' in local_var_params:
            body_params = local_var_params['batch_personal_name_geo_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/subclassificationIndianFullBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchPersonalNameGeoSubclassificationOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
