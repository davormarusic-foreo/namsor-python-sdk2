# coding: utf-8

"""
    NamSor API v2

    NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!   # noqa: E501

    OpenAPI spec version: 2.0.26
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class GeneralApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def name_type(self, proper_noun, **kwargs):  # noqa: E501
        """Infer the likely type of a proper noun (personal name, brand name, place name etc.)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.name_type(proper_noun, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proper_noun: (required)
        :return: ProperNounCategorizedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.name_type_with_http_info(proper_noun, **kwargs)  # noqa: E501
        else:
            (data) = self.name_type_with_http_info(proper_noun, **kwargs)  # noqa: E501
            return data

    def name_type_with_http_info(self, proper_noun, **kwargs):  # noqa: E501
        """Infer the likely type of a proper noun (personal name, brand name, place name etc.)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.name_type_with_http_info(proper_noun, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proper_noun: (required)
        :return: ProperNounCategorizedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['proper_noun']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method name_type" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'proper_noun' is set
        if ('proper_noun' not in local_var_params or
                local_var_params['proper_noun'] is None):
            raise ValueError("Missing the required parameter `proper_noun` when calling `name_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'proper_noun' in local_var_params:
            path_params['properNoun'] = local_var_params['proper_noun']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/nameType/{properNoun}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProperNounCategorizedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def name_type_batch(self, **kwargs):  # noqa: E501
        """Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.name_type_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchNameIn batch_name_in: A list of proper names
        :return: BatchProperNounCategorizedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.name_type_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.name_type_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def name_type_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.name_type_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchNameIn batch_name_in: A list of proper names
        :return: BatchProperNounCategorizedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method name_type_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_name_in' in local_var_params:
            body_params = local_var_params['batch_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/nameTypeBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchProperNounCategorizedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def name_type_geo(self, proper_noun, country_iso2, **kwargs):  # noqa: E501
        """Infer the likely type of a proper noun (personal name, brand name, place name etc.)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.name_type_geo(proper_noun, country_iso2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proper_noun: (required)
        :param str country_iso2: (required)
        :return: ProperNounCategorizedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.name_type_geo_with_http_info(proper_noun, country_iso2, **kwargs)  # noqa: E501
        else:
            (data) = self.name_type_geo_with_http_info(proper_noun, country_iso2, **kwargs)  # noqa: E501
            return data

    def name_type_geo_with_http_info(self, proper_noun, country_iso2, **kwargs):  # noqa: E501
        """Infer the likely type of a proper noun (personal name, brand name, place name etc.)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.name_type_geo_with_http_info(proper_noun, country_iso2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proper_noun: (required)
        :param str country_iso2: (required)
        :return: ProperNounCategorizedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['proper_noun', 'country_iso2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method name_type_geo" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'proper_noun' is set
        if ('proper_noun' not in local_var_params or
                local_var_params['proper_noun'] is None):
            raise ValueError("Missing the required parameter `proper_noun` when calling `name_type_geo`")  # noqa: E501
        # verify the required parameter 'country_iso2' is set
        if ('country_iso2' not in local_var_params or
                local_var_params['country_iso2'] is None):
            raise ValueError("Missing the required parameter `country_iso2` when calling `name_type_geo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'proper_noun' in local_var_params:
            path_params['properNoun'] = local_var_params['proper_noun']  # noqa: E501
        if 'country_iso2' in local_var_params:
            path_params['countryIso2'] = local_var_params['country_iso2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/nameTypeGeo/{properNoun}/{countryIso2}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProperNounCategorizedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def name_type_geo_batch(self, **kwargs):  # noqa: E501
        """Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.name_type_geo_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchNameGeoIn batch_name_geo_in: A list of proper names
        :return: BatchProperNounCategorizedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.name_type_geo_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.name_type_geo_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def name_type_geo_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.name_type_geo_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchNameGeoIn batch_name_geo_in: A list of proper names
        :return: BatchProperNounCategorizedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_name_geo_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method name_type_geo_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_name_geo_in' in local_var_params:
            body_params = local_var_params['batch_name_geo_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/nameTypeGeoBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchProperNounCategorizedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
